{"version":3,"sources":["components/form.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["textFieldStyles","fieldGroup","width","narrowTextFieldStyles","stackTokens","childrenGap","EMAIL_REGEX","RegExp","API_URL_REGEX","SevereExample","message","MessageBar","messageBarType","MessageBarType","severeWarning","SuccessExample","success","isMultiline","Form","React","airtableApiUrl","setAirtableApiUrl","airtableApiKey","setAirtableApiKey","email","setEmail","isError","isSuccess","messageState","setMessageState","onChangeAirtableApiUrl","event","newValue","onChangeAirtableApiKey","onChangeEmailValue","generateSwagger","a","preventDefault","fetch","body","JSON","stringify","airtable_url","airtable_key","headers","method","res","json","result","status","error","console","log","emailError","test","airtableApiUrlError","style","minWidth","maxWidth","onSubmit","Stack","tokens","TextField","label","placeholder","value","errorMessage","onChange","styles","PrimaryButton","text","type","disabled","length","documentStyle","marginTop","boxShadow","Depths","depth4","padding","backgroundColor","App","useEffect","initializeIcons","className","src","height","alt","fontSize","FontSizes","size42","paddingBottom","paddingTop","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06ab45b5.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { ITextFieldStyles, TextField, } from \"@fluentui/react/lib/TextField\";\nimport { PrimaryButton, } from \"@fluentui/react/lib/Button\";\nimport { Stack, } from \"@fluentui/react/lib/Stack\";\nimport { MessageBar, MessageBarType, } from \"@fluentui/react/lib/MessageBar\";\n\nconst textFieldStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: \"100%\", }, };\nconst narrowTextFieldStyles: Partial<ITextFieldStyles> = { fieldGroup: { width: \"50%\", }, };\nconst stackTokens = { childrenGap: 15, };\n\nconst FN_URL = \"https://flyweight-airtable-swagger-builder-fn.azurewebsites.net/api/Build/swagger\";\n\n// const FN_URL = 'http://localhost:7071/api/Build/swagger'\n\nconst EMAIL_REGEX = new RegExp(/^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})$/i);\nconst API_URL_REGEX = new RegExp(/^(https:\\/\\/)(api.airtable.com)(\\/v0)(\\/)([a-zA-Z0-9-]*)(\\/)([a-zA-Z0-9-]*)$/);\n\nconst SevereExample = ({message,}: {message: string}) => (\n  <MessageBar\n    messageBarType={MessageBarType.severeWarning}\n  >\n    {message}\n  </MessageBar>\n);\n\nconst SuccessExample = ({message,}: {message: string}) => (\n  <MessageBar\n    messageBarType={MessageBarType.success}\n    isMultiline={false}\n  >\n    {message}\n  </MessageBar>\n);\n\n\nexport const Form = () => {\n\n  // Form state\n  const [airtableApiUrl, setAirtableApiUrl,] = React.useState(\"\")  \n  const [airtableApiKey, setAirtableApiKey,] = React.useState(\"\")  \n  const [email, setEmail,] = React.useState(\"\")  \n\n  const [messageState, setMessageState,] = React.useState({\n    isError: false,\n    isSuccess: false,\n    message: \"\",\n  })  \n\n  const onChangeAirtableApiUrl = React.useCallback(\n    (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n      setAirtableApiUrl(newValue || \"\");\n    },\n    [],\n  );\n  const onChangeAirtableApiKey = React.useCallback(\n    (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n      setAirtableApiKey(newValue || \"\");\n    },\n    [],\n  );\n  const onChangeEmailValue = React.useCallback(\n    (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n      setEmail(newValue || \"\");\n    },\n    [],\n  );\n\n  const generateSwagger = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n\n    const res = await fetch(\n      FN_URL,\n      {\n        body: JSON.stringify({\n          email,\n          airtable_url: airtableApiUrl,\n          airtable_key: airtableApiKey,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        method: \"POST\",\n      }\n    )\n\n    const result = await res.json()\n    if (res.status === 200) {\n      setMessageState({\n        isError: false,\n        isSuccess: true,\n        message: \"Success! Please check your email\",\n      })\n    } else {\n      setMessageState({\n        isError: true,\n        isSuccess: false,\n        message: result.error.message,\n      })\n\n    }\n    console.log(result)\n  }\n\n  const validForm = (): boolean => {\n    return (\n      email.length > 0 &&\n      emailError() === \"\" &&\n      airtableApiUrl.length > 0 &&\n      airtableApiUrlError() === \"\" &&\n      airtableApiKey.length > 0\n    )\n  }\n\n  const emailError = (): string => {\n    if (email === \"\") {\n      return \"\"\n    }\n    if (!EMAIL_REGEX.test(email)) {\n      return \"Valid email required\"\n    }\n    return \"\"\n  }\n\n  const airtableApiUrlError = (): string => {\n    if (airtableApiUrl === \"\") {\n      return \"\"\n    }\n    if (!API_URL_REGEX.test(airtableApiUrl)) {\n      return \"Please check your Airtable API url\"\n    }\n    return \"\"\n  }\n\n\n  return (\n    <div style={{width:\"50%\", minWidth: \"350px\", maxWidth: \"600px\",}}>\n      {messageState.isError && <SevereExample message={messageState.message} />}\n      {messageState.isSuccess && <SuccessExample message={messageState.message} />}\n      <form onSubmit={generateSwagger}>\n        <Stack tokens={stackTokens}>\n          <TextField\n            label=\"Airtable API URL\"\n            placeholder=\"https://api.airtable.com/v0/appABC123/MyTable\"\n            value={airtableApiUrl}\n            errorMessage={airtableApiUrlError()}\n            onChange={onChangeAirtableApiUrl}\n            styles={textFieldStyles}\n          />\n          <TextField\n            label=\"Airtable API Key\"\n            placeholder=\"key123\"\n            value={airtableApiKey}\n            onChange={onChangeAirtableApiKey}\n            styles={narrowTextFieldStyles}\n          />\n          <TextField\n            label=\"Email Address to send Swagger file to\"\n            onChange={onChangeEmailValue}\n            value={email}\n            errorMessage={emailError()}\n            styles={textFieldStyles}\n          />\n          <PrimaryButton text=\"Generate Swagger File\" type=\"submit\" disabled={!validForm()} />\n        </Stack>\n      </form>\n\n    </div>\n  )\n}","import React, { useEffect } from 'react';\nimport './App.css';\nimport { Form } from './components/form'\nimport { FontSizes } from '@fluentui/react/lib/Styling';\nimport { Depths, initializeIcons } from '@fluentui/react';\n\nconst documentStyle = {\n  marginTop: \"3em\",\n  boxShadow: Depths.depth4,\n  padding: \"2em\",\n  backgroundColor: \"#ffffff\",\n  width: \"100%\",\n  minWidth: \"350px\",\n  maxWidth: \"700px\",\n}\n\nfunction App() {\n\n  useEffect(() => {\n    initializeIcons(/* optional base url */);\n  });\n\n  return (\n    <div className=\"App\">\n      <main>\n        <img src='flyweight_logo_800.png' height='127' width='300' alt=\"Flyweight Logo\"/>\n        <h1 style={{fontSize: FontSizes.size42, paddingBottom: \"1em\", paddingTop:\"1em\",}}>\n          Airtable to Swagger Conversion\n        </h1>\n        <Form />\n        <div style={documentStyle}>\n          <h4>About</h4>\n          <p>This application converts Airtable tables to Swagger files which can be be used\n            to consume the Airtable API from the Microsoft Power Platform.\n          </p>\n          <h4>How to use the app</h4>\n          <p>Start by visiting <a href='https://airtable.com/api' target='_blank' rel=\"noreferrer\">https://airtable.com/api</a> in order to find your Airtable API URL.\n            You will also need to provide your Airtable API key, which can be found in your \n            account page (<a href=\"https://airtable.com/account\" target=\"_blank\" rel=\"noreferrer\">https://airtable.com/account</a>)\n          </p>\n          <p>\n            Enter in the details above and click generate. The generated swagger file will be emailed to the email address you provided.\n            You can then import this file into your Power Platform project as a custom connector.\n          </p>\n          <h4>Support</h4>\n          <p>\n            This project is maintained by Flyweight.Cloud, which provides low code tooling for building cloud applications.\n            If you have any questions, please contact us at <a href=\"mailto:team@flyweight.cloud\">team@flyweight.cloud</a>\n          </p>\n          <p>\n            This project is provided without warranty and under the terms of the MIT license.\n          </p>\n          <h4>Open Source</h4>\n          <p>\n            Flyweight believes open source is the key to faster low code adoption. You can find the source code to this swagger builder at <a href='https://github.com/flyweightcloud/airtable2swagger' target='_blank' rel=\"noreferrer\">https://github.com/flyweightcloud/airtable2swagger</a>\n          </p>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}